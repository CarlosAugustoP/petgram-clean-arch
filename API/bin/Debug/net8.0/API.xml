<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="M:API.Controllers.AuthController.Login(Application.Abstractions.Users.Login.LoginCommand)">
            <summary>
            Logs in the user and returns an authentication token
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.AuthController.ValidateToken(Application.Abstractions.Users.ValidateToken.ValidateTokenCommand)">
            <summary>
            Actually creates the user, moving the object from redis to 
            </summary>
            <param name="vtc"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.CommentController.ReplyToComment(Application.Abstractions.Comments.CreateReplyCommand.CreateReplyCommand)">
            <summary>
            Replies to a comment
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.CommentController.LikeComment(System.Guid)">
            <summary>
            Adds a like to a comment
            </summary>
            <param name="commentId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.CommentController.DeleteComment(System.Guid)">
            <summary>
            Deletes a comment or reply
            </summary>
            <param name="commentId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.CommentController.EditComment(Application.Abstractions.Comments.UpdateCommentCommand.UpdateCommentCommand)">
            <summary>
            Edits a comment
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MomentController.CreateMoment(Application.Abstractions.Moments.CreateMomentCommand)">
            <summary>
            Creates a new moment for the current user
            </summary>
        </member>
        <member name="M:API.Controllers.MomentController.GetFeed">
            <summary>
            Gets Feed
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.MomentController.GetUserMoments(System.Guid)">
            <summary>
            Gets moments by userId
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.NotificationController.GetNotificationsByUser">
            <summary>
            Gets notifications for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.NotificationController.MarkNotificationsAsRead(System.Collections.Generic.List{System.Guid})">
            <summary>
            Marks notifications as read for the current user
            </summary>
        </member>
        <member name="M:API.Controllers.NotificationController.GetUnreadCount">
            <summary>
            Gets the count of unread notifications for the current user
            </summary>
        </member>
        <member name="M:API.Controllers.PetController.GetPetType(Application.Abstractions.Pets.GetTypeQuery.GetTypeQuery)">
            <summary>
            Gets the type of a pet. Useful for when creating a pet in the form.
            </summary>
            <param name="mediaFile"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PetController.CreatePet(Application.Abstractions.Pets.CreatePetCommand.CreatePetCommand)">
            <summary>
            Creates the pet 
            </summary>
            <param name="createPetCommand"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PetController.DeletePet(System.Guid)">
            <summary>
            Deletes a pet by its ID
            </summary>
            <param name="petId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PetController.UpdatePet(Application.Abstractions.Pets.UpdatePetCommand.UpdatePetCommand)">
            <summary>
            Updates the pet information
            </summary>
            <param name="updatePetCommand"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.CreatePost(Application.Abstractions.Posts.CreatePostCommand.CreatePostCommand)">
            <summary>
            Creates a Post based on a user's request
            </summary>
            <returns>
            The Created Post
            </returns>
        </member>
        <member name="M:API.Controllers.PostController.GetPostById(System.Guid)">
            <summary>
            Gets a Post by its Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.LikePostById(System.Guid)">
            <summary>
            Likes a Post by its Id
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.GetLikesByPostId(System.Guid,API.Abstractions.Requests.PageRequest)">
            <summary>
            Gets all the likes for a Post by its Id
            </summary>
            <param name="postId"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.CreatePostComment(Application.Abstractions.Comments.CreateCommentCommand.CreateCommentCommand)">
            <summary>
            Creates a comment on a Post
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.GetPostComments(API.Abstractions.Requests.PageRequest,System.Guid)">
            <summary>
            Gets all the comments for a Post
            </summary>
            <param name="pageRequest"></param>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.GetFeed(API.Abstractions.Requests.PageRequest)">
            <summary>
            Returns the feed 
            </summary>
        </member>
        <member name="M:API.Controllers.PostController.GetFeedByUserId(System.Guid,API.Abstractions.Requests.PageRequest)">
            <summary>
            Gets the feed for a specific user
            </summary>
            <param name="userId"></param>
            <param name="pageRequest"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.PostController.GetFeedByCurrentUser(API.Abstractions.Requests.PageRequest)">
            <summary>
            Gets the feed for the current user
            </summary>
            <param name="pageRequest"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.UserFollowUser(System.Guid)">
            <summary>
            Follows a user
            </summary>
            <param name="followedId"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.Signup(Application.Abstractions.Users.AddNewUser.AddNewUserCommand)">
            <summary>
            Creates a new user, inserting it into the database
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.GetFollowers(API.Abstractions.Requests.PageRequest)">
            <summary>
            Fetches all the followers for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.GetFollowing(API.Abstractions.Requests.PageRequest)">
            <summary>
            Fetches all the users that the current user is following
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.RequestPasswordChange(System.String)">
            <summary>
            Requests a password change for a user by sending an email with a link to reset the password
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.ResetPassword(Application.Abstractions.Users.Passwords.AccessLinkCommand)">
            <summary>
            Resets the password for a user using an access link
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.BanUser(Application.Abstractions.Users.BanUser.BanUserCommand)">
            <summary>
            Bans a user from the platform
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.GetProfile">
            <summary>
            Gets the profile of the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.UpdateProfile(Application.Abstractions.Users.UpdateUser.UpdateUserCommand)">
            <summary>
            Updates the profile of the current user
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.RequestArchiveProfile(System.String)">
            <summary>
            Requests to archive the user's profile, which will set the status to archived after a confirmation
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.UserController.RequestDeleteProfile(System.String)">
            <summary>
            Requests to delete the user's profile, which will set the status to deleted after a confirmation
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
    </members>
</doc>
